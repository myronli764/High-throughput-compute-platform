from typing import Dict, List
import re
from utils.logger import logger
import json
import networkx as nx

class LogData():
    def __init__(self,logfile):
        self.log = logfile

def FindRelation(edges):
    pk_ = []
    for e in edges:
        axes = ['->', '<-']
        for a in axes:
            if a in e:
                axe = a
        if axe == '->':
            parent, kid = e.split(axe)
        else:
            kid, parent = e.split(axe)
        pk_.append((int(parent),int(kid)))
    return pk_
class WorkNode():
    r'''
    ## all worknode should inherit this class
    '''
    def __init__(self,workinfo:Dict):
        r'''

        :param workinfo:
         workinfo = {1:{"state":"ALIVE","input":["some files",],"output":"some files","idx":1,"link":["1->2",],}

        '''
        self.name = list(workinfo.keys())[0]
        for info,value in workinfo[self.name].items():
            self.__setattr__(info,value)
        if type(self.input) is WorkNode:
            self.input = self.input.output
        if workinfo[self.name].get('RunScript') is None:
            self.RunScript = ''
        self.cwd = ''
        self.pid_in_CNode = 0

    def AddRunScript(self,script:str,shell='bash',spec: Dict=None) -> str:
        r'''
        :param script: script should specific the relationship among the command, input and output, use $$ symbol to specific the files
        :param spec: Dict to special option, such as command work directory cwd
        ## EXAMPLE:
               uniform_script = "command $$input[i]$$ command $$input[j]$$"
               self.input = ['ini.tpr',]
               self.output = ['out.gro',]
               example_script = "gmx mdrun -deffnm $$input[0]$$ -v -c $$output[0]$$ -ntmpi 1 -ntomp 12 -gpu_id 0 "

        :param shell: 'bash' is default
        :return: script
        '''
        if shell == 'bash':
            logger.info('Use bash shell script.')
            command_list = script.split('$$')
            matches = re.findall(r'\$\$(.*?)\$\$',script)
            for pos,i in enumerate(command_list):
                if i in matches:
                    io_list = re.split(r'\[|\]',i)
                    io_list = [ _ for _ in io_list if _ != '']
                    command_list[pos] = self.__getattribute__(io_list[0])[int(io_list[1])]
            if spec is not None:
                workdir = spec['workdir']
                chdir = [f'cd {workdir}; ']
                command_list = chdir + command_list
            script = ''.join(command_list)
            if self.RunScript == '':
                self.RunScript = script
            else:
                self.RunScript = self.RunScript + '; ' + script
            logger.info(f'Work Named {self.name} Add RunScript: [{script}] to [{self.RunScript}].')
            return script
    def CleanRunScript(self):
        self.RunScript = ''
        logger.info(f'Clean All RunScript.')
        return self.RunScript

class WorkFlow():
    def __init__(self,workgraph=None):
        r'''

        :param workgraph: DAG, Directed Acyclic Graph, specific the WorkFlowGraph, Generated by Manager.
        '''
        self.WorkGraph = workgraph
    def is_initialized(self):
        if self.WorkGraph is None:
            logger.error('FATAL ERROR WorkGraph is not initialized.')
            return False
        else:
            return True

    def InitializedFromNodeslist(self,nodeslist: List[WorkNode,]):
        self.WorkGraph = nx.DiGraph()
        for n in nodeslist:
            self.WorkGraph.add_node(n.idx,WorkNode=n)
            edges = n.link
            pk_ = FindRelation(edges)
            for pk in pk_:
                self.WorkGraph.add_edge(pk[0],pk[1])
        return

class WorkFlowDataBase():
    def __init__(self ,workflow : nx.Graph,log =None):
        self.logdata = LogData(log)
        self.workflow = WorkFlow(workflow)

    def dump(self):
        r'''
        dump all data to json
        :return:
        '''
        return

if __name__ == '__main__':

    ## test for WorkNode
    workinfo = {
        1: {"state": "ALIVE", "input": ["ini.gro", "md.mdp", "topol.top"], "output": ["out.tpr"] , "idx": 1, "link": ["1->2", ], "RunScript": 'echo hello_world'}}
    wn1 = WorkNode(workinfo=workinfo)
    script = wn1.AddRunScript('gmx grompp -f $$input[1]$$ -c $$input[0]$$ -p $$input[2]$$ -o $$output[0]$$ -maxwarn 100')
    #wn1.AddRunScript('gmx energy -f $$input[0]$$ -o $$input[0]$$ ')
    #wn1.CleanRunScript()
    #print(wn1.RunScript,'**')
    workinfo = {
        2: {"state": "ALIVE", "input": ["run.py","ini.xml"], "output": [], "idx": 2,
            "link": ["1->2",], }}
    wn2 = WorkNode(workinfo=workinfo)
    script = wn2.AddRunScript('hoomd $$input[0]$$ $$input[1]$$ --gpu=0',spec={'workdir':'/home/lmy'})
    ## test for WorkFlow
    wf = WorkFlow()
    wf.InitializedFromNodeslist([wn1,wn2])
    #print(wf.is_initialized())
    for n in wf.WorkGraph.nodes:
        n = wf.WorkGraph.nodes[n]['WorkNode']
        print(n.RunScript,n.idx)
    wn1.AddRunScript('echo fuck')
    #print(wf.WorkGraph.nodes[wn1.idx]['WorkNode'].RunScript)
    wfdb = WorkFlowDataBase(wf.WorkGraph)
    from ManSYS.Manager import Manager
    Man = Manager(workdict=1)
    Man.WorkFlowFromDataBase(wfdb)
    wfdb2 = Man.WorkFlowToDataBase()
    print(Man.WorkFlow.nodes[1]['WorkNode'].state)
    from LaunchSYS.Launcher import Launcher
    l = Launcher(wn1,{'nodename':'node1','username':'shirui','hostname':'10.10.2.126','port':22,'key':'tony9527','pkey':None})
    l.STATEToRUNING()
    print(Man.WorkFlow.nodes[1]['WorkNode'].state)

